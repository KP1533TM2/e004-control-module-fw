//----------------------------------------------------------------------------

//Модуль управления светодиодами

//------------------------ Используемые ресурсы: -----------------------------

//Модуль производит управление светодиодами индикации режимов работы.
//У каждого светодиода могут быть 5 состояний:
//1. Выключен.
//2. Включен.
//3. Медленно мигает.
//4. Нормально мигает.
//5. Быстро мигает.
//Частота мигания для каждого из режимов задается константами
//SLOW_PERIOD, NORM_PERIOD, FAST_PERIOD соответственно.
//Коэффициент заполнения (время горения светодиода) задается константами
//SLOW_DUTY, NORM_DUTY, FAST_DUTY.
//Процесс мигания реализован в методе Execute. Чтобы получить номинальную
//частоту мигания, этот метод должен вызываться с периодом 10 мс.
//Поскольку одновременно могут мигать несколько светодиодов с разными
//частотами, для каждой частоты используется отдельный счетчик.
//Если нет ни одного мигающего светодиода, счетчики останавливаются и
//сбрасываются. В результате мигание всегда начинается с зажигания
//светодиода на номинальный интервал времени, а все счетчики оказываются
//синхронизированными между собой.

//----------------------------------------------------------------------------

#include "main.hpp"
#include "leds.hpp"

//----------------------------------------------------------------------------
//------------------------------ Класс TLeds: --------------------------------
//----------------------------------------------------------------------------

//----------------------------- Конструктор: ---------------------------------

TLeds::TLeds(void)
{
  Led_Rec.DirOut();
  Led_Stop.DirOut();
  Led_PlayF.DirOut();
  Led_Ffd.DirOut();
  Led_Rew.DirOut();
  Led_PlayR.DirOut();
  Led_Pause.DirOut();

  SlowBlink = 0;
  NormBlink = 0;
  FastBlink = 0;

  PreLeds = LED_NONE;

  Set(LED_ALL, LEDS_OFF); //очистка всех светодиодов
}

//------------------------ Выполнение индикации: -----------------------------

void TLeds::Execute(void) //вызывается с периодом T_SLOW = 10 мс
{
  uint8_t leds = Mask.cont; //горящие светодиоды

  if(Mask.slow || Mask.norm || Mask.fast)
  {
    //выполняется, если есть хоть один мигающий светодиод:
    if(SlowBlink <= (SLOW_PERIOD / T_SLOW * SLOW_DUTY / 100))
      leds |= Mask.slow;
    if(++SlowBlink == (SLOW_PERIOD / T_SLOW))
      SlowBlink = 0;
    if(NormBlink <= (NORM_PERIOD / T_SLOW * NORM_DUTY / 100))
      leds |= Mask.norm;
    if(++NormBlink == (NORM_PERIOD / T_SLOW))
      NormBlink = 0;
    if(FastBlink <= (FAST_PERIOD / T_SLOW * FAST_DUTY / 100))
      leds |= Mask.fast;
    if(++FastBlink == (FAST_PERIOD / T_SLOW))
      FastBlink = 0;
  }
  else
  {
    //мигания нет, синхронизация счетчиков:
    SlowBlink = 0;
    NormBlink = 0;
    FastBlink = 0;
  }
  //если есть изменения, обновление светодиодов:
  if(PreLeds != leds)
  {
    PreLeds = leds;
    Update(leds);
  }
}

//----------------------------------------------------------------------------
//--------------------------- Внутренние методы: -----------------------------
//----------------------------------------------------------------------------

//-------------------------- Обновление индикации: ---------------------------

inline void TLeds::Update(uint8_t leds)
{
  Led_PlayF = leds & LED_PLAYF;
  Led_PlayR = leds & LED_PLAYR;
  Led_Pause = leds & LED_PAUSE;
  Led_Rec   = leds & LED_REC;
  Led_Ffd   = leds & LED_FFD;
  Led_Rew   = leds & LED_REW;
  Led_Stop  = leds & LED_STOP;
}

//----------------------------------------------------------------------------
//------------------------- Интерфейсные методы: -----------------------------
//----------------------------------------------------------------------------

//------------------------ Добавление светодиода: ----------------------------

void TLeds::Set(uint8_t leds, uint8_t mode)
{
  if(mode == LEDS_CONT) Mask.cont |= leds; else Mask.cont &= ~leds;
  if(mode == LEDS_SLOW) Mask.slow |= leds; else Mask.slow &= ~leds;
  if(mode == LEDS_NORM) Mask.norm |= leds; else Mask.norm &= ~leds;
  if(mode == LEDS_FAST) Mask.fast |= leds; else Mask.fast &= ~leds;
}

//--------------------- Чтение состояния светодиодов: ------------------------

void TLeds::Get(leds_t &leds)
{
  leds = Mask;
}

//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
